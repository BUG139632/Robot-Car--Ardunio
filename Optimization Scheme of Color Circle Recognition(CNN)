import keras
from keras.models import Sequential
from keras.utils import np_utils
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.callbacks import ModelCheckpoint
import numpy as np
import matplotlib.pyplot as plt
def createModel(num_classes):
    # CNN初始化
    model = Sequential()
    # 第一层卷积层 (32, 28, 28)
    model.add(Convolution2D(
        filters=32,
        kernel_size=(5, 5),
        activation='relu',
        padding='same',
        input_shape=(1,
                     28, 28),
    ))
    # 第一层池化层 (32, 14, 14)
    model.add(MaxPooling2D(
        pool_size=(2, 2),
        strides=(2, 2),
        padding='same',
    ))
    # 第二层卷积层 (64, 14, 14)
    model.add(Convolution2D(64, (5, 5), padding='same', activation='relu'))
    # 第二层池化层 (64, 7, 7)
    model.add(MaxPooling2D(pool_size=(2, 2), padding='same'))
    # 防止过拟合
    model.add(Dropout(0.25))
    # 第一层全连接层 input shape (64 * 7 * 7) = (3136), output shape (1024)
    model.add(Flatten())
    model.add(Dense(1024, activation='relu'))
    # 防止过拟合
    model.add(Dropout(0.5))
    # 第二层全连接层
    model.add(Dense(num_classes, activation='softmax'))
    return model
def load_data(path):
    with np.load(path, allow_pickle=True) as f:
        x_train, y_train = f['x_train'], f['y_train']
        x_test, y_test = f['x_test'], f['y_test']
    return (x_train, y_train), (x_test, y_test)
# 准备数据
nb_calsses = 10
(x_train, y_train), (x_test, y_test) = load_data('mnist.npz')
# 载入数据
x_train = x_train.reshape(-1, 1, 28, 28)
x_test = x_test.reshape(-1, 1, 28, 28)
y_train = np_utils.to_categorical(y_train, nb_calsses)
y_test = np_utils.to_categorical(y_test, nb_calsses)
def plot_an_image(x):
    fig, ax = plt.subplots(figsize=(1, 1))
    plt.imshow(x, cmap='Greys')
    plt.show()
plot_an_image(x_train[0][0])
def plot_100_images(x):
    fig, ax = plt.subplots(nrows=10, ncols=10, sharey='all', sharex='all', figsize=(8, 8))
    ax = ax.flatten()
    for r in range(10):
        for c in range(10):
            image = x[np.random.randint(0,10000)][0].reshape(28,28)
            ax[10*r+c].imshow(image, cmap='Greys', interpolation='nearest')
    ax[0].set_xticks([])
    ax[0].set_yticks([])
    plt.tight_layout()
plot_100_images(x_test)
plt.show()
# 创建模型
model = createModel(nb_calsses)
# 配置训练模型
model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])
# 训练模型
print('\ntraining ------------')
model.fit(x_train, y_train,
          batch_size=32,
          epochs=10,
          verbose=1,
          validation_data=(x_test, y_test),
          )
# 测试模型
print('\nTesting -------------')
score = model.evaluate(x_test, y_test, verbose=1)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
