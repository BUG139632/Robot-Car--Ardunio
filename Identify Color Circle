import sensor, image, time, json
from pyb import UART  # 串口
BinThresholds = [(46, 65, -15, 45, -18, 16),
                (82, 58, -15, -99, -49, 31),
                (28, 81, -52, 81, -35, -20)
                ]
GrayThreshold = [(100, 255)]
uart = UART(3, 19200)  # 初始化串口 波特率 115200
clock = time.clock()
Flag = False
def init_sensor():
    '''
    初始化感光芯片
    '''
    sensor.reset()
    sensor.set_pixformat(sensor.RGB565)
    sensor.set_framesize(sensor.QQVGA)
    sensor.skip_frames(time = 2000)
    sensor.set_auto_gain(False)
    sensor.set_auto_whitebal(False)
    # sensor.set_vflip(True)#垂直翻转
    # sensor.set_hmirror(True)#水平翻转
def get_data(uart):
    global Flag
    r = -1
    if (uart.any()):
        Flag = False
        r = int (uart.readline().decode()) - 1
    if r is 0 or r is 1 or r is 2:
        Flag = True
        return r
    else:
        return -1
def main():
    global Flag
    init_sensor()  # 初始化感光芯片
    clock.tick()  # Update the FPS clock.
    while (True):
        img = sensor.snapshot()
        i = get_data(uart)
        if Flag is True:
            img.binary([BinThresholds[i]])  # 图像进行二值化
            img.dilate(2, threshold=1)  # 膨胀
            img.erode(2, threshold=1)  # 腐蚀
            img.laplacian(1, sharpen=True)  # 锐化
            blobs = img.find_blobs(GrayThreshold, pixels_threshold=2025, area_threshold=1600, merge=True)
            if len(blobs) == 0:
                #output_str = 'not found!'
                #uart.write(output_str + '\n')
                #print('not found!')
                continue
            #print('sum :', len(blobs))
            #output_str = json.dumps(blobs)
            #print('you send:', output_str)
            #uart.write(output_str + '\n')
            for c in img.find_circles(threshold = 3500, x_margin = 10, y_margin = 10, r_margin = 10, r_min = 2, r_max = 100, r_step = 2):
                area = (c.x()-c.r(), c.y()-c.r(), 2*c.r(), 2*c.r())
                statistics = img.get_statistics(roi=area)#像素颜色统计
                print(statistics)
                #(46, 65, -15, 45, -18, 16)是红色的阈值，所以当区域内的众数（也就是最多的颜色），范围在这个阈值内，就说明是红色的圆。
                #l_mode()，a_mode()，b_mode()是L通道，A通道，B通道的众数。
                if 46<statistics.l_mode()<65 and -15<statistics.a_mode()<45 and -18<statistics.b_mode()<16:#if the circle is red
                    img.draw_circle(c.x(), c.y(), c.r(), color = (255, 0, 0))#识别到的红色圆形用红色的圆框出来
                    img.draw_cross(c.cx(), c.cy())
                else:
                    img.draw_rectangle(area, color = (255, 255, 255))
                    #将非红色的圆用白色的矩形框出来
            # for blob in blobs:
            #     img.draw_rectangle(blob.rect())
            #     img.draw_cross(blob.cx(), blob.cy())
if __name__ == '__main__':
    main()
